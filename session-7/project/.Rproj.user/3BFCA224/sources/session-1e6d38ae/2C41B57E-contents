
library(shiny)
library(dplyr)
library(readr)
library(leaflet)
library(plotly)
library(spData)
library(sf)
library(DT)
library(RColorBrewer)
library(DBI)
library(shinymanager)

library(shinyjs)
library(shiny.router)
library(shinyWidgets)

library(quarto)

# load the new modules using the source() function
source("src/nav-module.R")
source("src/filters-module.R")
source("src/chart-page-module.R")
source("src/table-page-module.R")
source("src/temperature-page-module.R")
source("src/download-module.R")
source("src/quarto-module.R")
source("src/util.R")
source("src/compare-country-page-module.R")
source("src/view-downloads-module.R")

# load world data from the spData package
# world_data <- spData::world |>
#   filter(name_long != "Antarctica") |>
#   mutate(popDensity = round(pop / area_km2, 4)) |>
#   st_drop_geometry()

world_data <- read_rds("data-with-flags.rds")

# load DB connection values from .env
readRenviron(".env")

# use the environemnt variables with Sys.getenv() to create a db connection
dbConn <- DBI::dbConnect(
  RPostgres::Postgres(),
  dbname = Sys.getenv("DB_NAME"),
  host = Sys.getenv("DB_HOST"),
  port = as.numeric(Sys.getenv("DB_PORT")),
  user = Sys.getenv("DB_USER"),
  password = Sys.getenv("DB_PW")
)

# Create SQLite db for admin auth
credentials <- data.frame(
  user = c(Sys.getenv('ADMIN_USER')),
  password = c(Sys.getenv('ADMIN_PW')),
  admin = c(FALSE),
  stringsAsFactors = FALSE
)
create_db(
  credentials_data = credentials,
  sqlite_path = "auth_db.sqlite",
  passphrase = Sys.getenv('AUTH_DB_KEY')
)


# Fill out the getCountries function to query the world_temp_data table from the database, filter by country iso_a2 codes, and summarise an average monthly temperature

getCountries <- function(country_iso_codes, dates){
  start <- as.integer(dates[1])
  end <- as.integer(dates[2])
  # browser()
  # The old query
  # use the tbl function to create a reference to the database
  result <- tbl(dbConn, "world_temp_data") %>%
    filter(iso_a2 %in% country_iso_codes,
           between(year, start, end)) %>%
    group_by(country, city, region, month, year) %>%
    summarise(avg_monthly_temp =  mean(avg_temp, na.rm = T)) %>%
    distinct() %>%
    # when the collect function is called, the dplyr code will be
    # translated into SQL and evaluated to retrieve the data
    collect()
}

onStop(function() { dbDisconnect(dbConn)})