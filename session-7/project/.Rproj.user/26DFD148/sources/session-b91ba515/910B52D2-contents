---
title: "R Shiny Advanced Masterclass"
author: "Epi-interactive"
date: "03/25/2024"
format: 
  html:
    self-contained: true #required to make plots and tables load correctly
always_allow_html: true
params:
  filtered_data: NA
  temp_data: NA
  country_data: NA
---

```{r setup}
#| include: false
#| warning: false
#| error: false

# Source calls
library(knitr)
library(dplyr)
library(plotly)
library(sf)
library(DT)
library(htmltools)
source("src/util.R")
knitr::opts_chunk$set(echo = TRUE)

country_filters <- params$country_data

# Filtered world data
filtered_data <- as.data.frame(params$filtered_data)

# Temp data
temp_data <- as.data.frame(params$temp_data)
has_temp_data <- nrow(temp_data) > 0

```

## Session 7

------------------------------------------------------------------------

This exercise will allow you to practise the use of Quarto, integrating Quarto with R / R Shiny code, and exporting a PDF from an Quarto Markdown document through a Shiny application.

In separate paragraphs below, please insert the Quarto Markdown text described in the exercise. Feel free to include more additions to this content:

Today's date: `r Sys.Date()`

### Countries Summary

``` {r country_1_summary}
#| echo: false
#| output: true

  c1_name <- country_filters[[1]]
  c1_data <- filtered_data %>% filter(name_long == c1_name)
  
  compare_country(c1_data, isQuarto = T)

```

``` {r country_2_summary}
#| echo: false
#| output: true

  c2_name <- country_filters[[2]]
  c2_data <- filtered_data %>% filter(name_long == c2_name)
  
  compare_country(c2_data, isQuarto = T)
```

### Average Monthly Temperature
 <!-- %>% filter (name_long %in% sel_countries) -->
``` {r avg_temp}
#| echo: false
#| output: true

  # Only display plot if temperature data is available
  if(has_temp_data) {
    fig <- generate_temperature_plot(temp_data)
    # Add plotly interaction through use of ggplotly()
    ggplotly(fig)
  } else {
    # display warning message if no data
    cat("no temperature data available")
  }
```
 

### Population
``` {r pop}
#| echo: false
#| output: true

  fig <- generate_compare_plot(filtered_data, plot_label = "Population", plot_id = "pop")
  ggplotly(fig)
```

### Life Expectancy
``` {r lifeExp}
#| echo: false
#| output: true

  fig <- generate_compare_plot(filtered_data, plot_label = "Life Expectancy", plot_id = "lifeExp")
  ggplotly(fig)
```

### GDP Per cap
``` {r gdpPercap}
#| echo: false
#| output: true

  fig <- generate_compare_plot(filtered_data, plot_label = "GDP Per cap", plot_id = "gdpPercap")
  ggplotly(fig)
```

### Population Density
``` {r popDensity}
#| echo: false
#| output: true

  fig <- generate_compare_plot(filtered_data, plot_label = "Population Density", plot_id = "popDensity")
  ggplotly(fig)
```

### Area km2
``` {r area_km2}
#| echo: false
#| output: true

  fig <- generate_compare_plot(filtered_data, plot_label = "Area km2", plot_id = "area_km2")
  ggplotly(fig)
```













